# -*- coding: utf-8 -*-
"""PytorchDescensoGradienteAuto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11L38C2L_wWG_4vTUsePOJdUKIHwxL7vX
"""

import torch

# Datos
X = torch.tensor([1, 2, 3, 4], dtype=torch.float32)
Y = torch.tensor([2, 4, 6, 8], dtype=torch.float32)

# Peso inicial
w = torch.tensor(0.0, dtype=torch.float32, requires_grad=True)

# Modelo de regresión lineal
def forward(x):
    return w * x

# Función de pérdida: Error cuadrático medio (MSE)
def loss(y, y_pred):
    return ((y_pred - y) ** 2).mean()

# Predicción inicial
print(f'Predicción antes del entrenamiento: f(5) = {forward(5).item():.3f}')

# Parámetros de aprendizaje
learning_rate = 0.01
n_iters = 100

# Proceso de entrenamiento
for epoch in range(n_iters):
    # Predicción
    y_pred = forward(X)

    # Cálculo del error
    l = loss(Y, y_pred)

    # Cálculo del gradiente
    l.backward()

    # Actualización de los pesos sin gradiente
    with torch.no_grad():
        w -= learning_rate * w.grad

    # Resetear el gradiente
    w.grad.zero_()

    # Diagnóstico
    if epoch % 10 == 0:
        print(f'epoch {epoch+1}: w = {w.item():.3f}, loss = {l.item():.8f}')

# Predicción después del entrenamiento
print(f'Predicción después del entrenamiento: f(5) = {forward(5).item():.3f}')