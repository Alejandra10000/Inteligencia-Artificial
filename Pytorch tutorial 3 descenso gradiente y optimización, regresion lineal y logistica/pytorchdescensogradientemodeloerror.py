# -*- coding: utf-8 -*-
"""PytorchRegresionLineal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17X8n94lRuwcDRNf3nkjWs4IwLB1J__Ci
"""

import torch
import torch.nn as nn

# Datos de entrenamiento, cuidado con las dimensiones
X = torch.tensor([[1], [2], [3], [4]], dtype=torch.float32)
Y = torch.tensor([[2], [4], [6], [8]], dtype=torch.float32)
n_samples, n_features = X.shape
print(f'#datos: {n_samples}, #características: {n_features}')

# Dato de prueba
X_test = torch.tensor([5], dtype=torch.float32)

# Diseño del modelo (debe contener la fórmula a evaluar)
input_size = n_features
output_size = n_features

# Diseño del modelo (lineal) con dimensiones de entrada y salida
model = nn.Linear(input_size, output_size)
print(f'Predicción antes del aprendizaje: f(5) = {model(X_test).item():.3f}')

# Definir error y optimizador
learning_rate = 0.01
n_iters = 100
loss = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

# Ciclo de aprendizaje
for epoch in range(n_iters):
    # Predict = evaluar función (forward)
    y_predicted = model(X)
    # Error
    l = loss(Y, y_predicted)
    # Calcular gradiente = retropropagación (backward)
    l.backward()
    # Mejorar coeficientes
    optimizer.step()
    # Resetear coeficientes
    optimizer.zero_grad()
    # Diagnóstico
    if epoch % 10 == 0:
        [w, b] = model.parameters()
        print(f'epoch {epoch+1}: w = {w[0][0].item():.3f}, loss = {l.item():.8f}')

print(f'Predicción después del aprendizaje: f(5) = {model(X_test).item():.3f}')